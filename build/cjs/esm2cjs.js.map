{
  "version": 3,
  "sources": ["../../src/esm/esm2cjs.ts", "../../shims/import.meta.url/shim.js"],
  "sourcesContent": ["import path from \"node:path\";\nimport { BuildOptions, build } from \"esbuild\";\nimport fs from \"fs-extra\";\nimport glob from \"tiny-glob\";\nimport { fileURLToPath } from \"node:url\";\n\nconst _dirname = path.dirname(fileURLToPath(import.meta.url));\nexport const shimsDir = path.join(_dirname, \"../../shims\");\n\nexport interface ESM2CJSOptions {\n\tinDir: string;\n\toutDir: string;\n\tcleanOutDir?: boolean;\n\tglobs?: string | string[];\n\tsourcemap?: boolean;\n\tlogLevel?: BuildOptions[\"logLevel\"];\n\tplatform?: BuildOptions[\"platform\"];\n\ttarget?: BuildOptions[\"target\"];\n\twritePackageJson?: boolean;\n\tpackageJsonSideEffects?: boolean | string[];\n}\n\nexport async function esm2cjs({\n\tinDir,\n\toutDir,\n\tglobs = [\"**/*.js\"],\n\tsourcemap = true,\n\tlogLevel = \"warning\",\n\tplatform = \"node\",\n\ttarget = \"node18\",\n\tcleanOutDir = false,\n\twritePackageJson = true,\n\tpackageJsonSideEffects,\n}: ESM2CJSOptions) {\n\t// Clean the output dir if necessary\n\tif (cleanOutDir) await fs.emptyDir(outDir);\n\n\t// Figure out what to compile\n\tif (typeof globs === \"string\") globs = [globs];\n\tconst entryPoints = (\n\t\tawait Promise.all(globs.map((g) => glob(g, { cwd: inDir })))\n\t).reduce((prev, cur) => [...prev, ...cur], []);\n\n\t// Compile ESM to CJS using esbuild\n\tconst buildResult = await build({\n\t\tabsWorkingDir: inDir,\n\t\tentryPoints,\n\t\toutdir: outDir,\n\t\tbundle: false,\n\t\tminify: false,\n\t\tmetafile: true,\n\t\tsourcemap,\n\t\tlogLevel,\n\t\tplatform,\n\t\tformat: \"cjs\",\n\t\ttarget,\n\t\tdefine: {\n\t\t\t\"import.meta.url\": \"__import_meta_url\",\n\t\t},\n\t\tinject: [path.join(shimsDir, \"import.meta.url/shim.js\")],\n\t});\n\n\t// Copy .d.ts files\n\tif (buildResult.metafile) {\n\t\tfor (const inputFile of Object.keys(buildResult.metafile.inputs)) {\n\t\t\tif (inputFile.startsWith(\".\")) {\n\t\t\t\t// File outside of the build directory, skip\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst declarationFileName = inputFile.replace(\n\t\t\t\t/\\.([cm]?)js$/,\n\t\t\t\t\".d.$1ts\",\n\t\t\t);\n\t\t\t// Try to copy the file, but don't fail if it doesn't exist\n\t\t\tawait fs\n\t\t\t\t.copyFile(\n\t\t\t\t\tpath.join(inDir, declarationFileName),\n\t\t\t\t\tpath.join(outDir, declarationFileName),\n\t\t\t\t)\n\t\t\t\t.catch(() => {});\n\t\t}\n\t}\n\n\t// If desired, define the module type of each build directory separately\n\tif (writePackageJson) {\n\t\tconst sideEffects =\n\t\t\t// Assume the package has side effects, unless explicitly stated otherwise\n\t\t\tpackageJsonSideEffects === true ||\n\t\t\tpackageJsonSideEffects === undefined\n\t\t\t\t? {}\n\t\t\t\t: { sideEffects: packageJsonSideEffects };\n\t\tawait fs.writeJSON(\n\t\t\tpath.join(inDir, \"package.json\"),\n\t\t\t{\n\t\t\t\ttype: \"module\",\n\t\t\t\t...sideEffects,\n\t\t\t},\n\t\t\t{ spaces: 4 },\n\t\t);\n\t\tawait fs.writeJSON(\n\t\t\tpath.join(outDir, \"package.json\"),\n\t\t\t{\n\t\t\t\ttype: \"commonjs\",\n\t\t\t\t...sideEffects,\n\t\t\t},\n\t\t\t{ spaces: 4 },\n\t\t);\n\t}\n}\n", "export const __import_meta_url =\n  typeof document === 'undefined' ? new (require('url'.replace('', '')).URL)('file:' + __filename).href :\n    (document.currentScript && document.currentScript.src || new URL('main.js', document.baseURI).href)\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;ACAO,IAAM,oBACX,OAAO,aAAa,cAAc,KAAK,QAAQ,MAAM,QAAQ,IAAI,EAAE,CAAC,GAAE,IAAK,UAAU,UAAU,EAAE,OAC9F,SAAS,iBAAiB,SAAS,cAAc,OAAO,IAAI,IAAI,WAAW,SAAS,OAAO,EAAE;ADFlG,uBAAiB;AACjB,qBAAoC;AACpC,sBAAe;AACf,uBAAiB;AACjB,sBAA8B;AAE9B,MAAM,WAAW,iBAAAA,QAAK,YAAQ,+BAAc,iBAAe,CAAC;AACrD,MAAM,WAAW,iBAAAA,QAAK,KAAK,UAAU,aAAa;AAezD,eAAsB,QAAQ,EAC7B,OACA,QACA,QAAQ,CAAC,SAAS,GAClB,YAAY,MACZ,WAAW,WACX,WAAW,QACX,SAAS,UACT,cAAc,OACd,mBAAmB,MACnB,uBAAsB,GACN;AAEhB,MAAI;AAAa,UAAM,gBAAAC,QAAG,SAAS,MAAM;AAGzC,MAAI,OAAO,UAAU;AAAU,YAAQ,CAAC,KAAK;AAC7C,QAAM,eACL,MAAM,QAAQ,IAAI,MAAM,IAAI,CAAC,UAAM,iBAAAC,SAAK,GAAG,EAAE,KAAK,MAAK,CAAE,CAAC,CAAC,GAC1D,OAAO,CAAC,MAAM,QAAQ,CAAC,GAAG,MAAM,GAAG,GAAG,GAAG,CAAA,CAAE;AAG7C,QAAM,cAAc,UAAM,sBAAM;IAC/B,eAAe;IACf;IACA,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,UAAU;IACV;IACA;IACA;IACA,QAAQ;IACR;IACA,QAAQ;MACP,mBAAmB;;IAEpB,QAAQ,CAAC,iBAAAF,QAAK,KAAK,UAAU,yBAAyB,CAAC;GACvD;AAGD,MAAI,YAAY,UAAU;AACzB,eAAW,aAAa,OAAO,KAAK,YAAY,SAAS,MAAM,GAAG;AACjE,UAAI,UAAU,WAAW,GAAG,GAAG;AAE9B;MACD;AACA,YAAM,sBAAsB,UAAU,QACrC,gBACA,SAAS;AAGV,YAAM,gBAAAC,QACJ,SACA,iBAAAD,QAAK,KAAK,OAAO,mBAAmB,GACpC,iBAAAA,QAAK,KAAK,QAAQ,mBAAmB,CAAC,EAEtC,MAAM,MAAK;MAAE,CAAC;IACjB;EACD;AAGA,MAAI,kBAAkB;AACrB,UAAM;;MAEL,2BAA2B,QAC3B,2BAA2B,SACxB,CAAA,IACA,EAAE,aAAa,uBAAsB;;AACzC,UAAM,gBAAAC,QAAG,UACR,iBAAAD,QAAK,KAAK,OAAO,cAAc,GAC/B;MACC,MAAM;MACN,GAAG;OAEJ,EAAE,QAAQ,EAAC,CAAE;AAEd,UAAM,gBAAAC,QAAG,UACR,iBAAAD,QAAK,KAAK,QAAQ,cAAc,GAChC;MACC,MAAM;MACN,GAAG;OAEJ,EAAE,QAAQ,EAAC,CAAE;EAEf;AACD;",
  "names": ["path", "fs", "glob"]
}
